package RJK::File::Path;

# Path object is immutable, only fields + accessors.
# Accessors are available when RJK::File::Path is imported.
# Providers of Path objects return blessed RJK::File::Path hashes
# containing required fields, they don't import RJK::File::Path.

use strict;
use warnings;

use RJK::File::Paths;

use overload '""' => 'path',
    cmp => sub { $_[0]{path} cmp $_[1]{path} }; # lt, gt, le, ge, eq, ne are autogenerated

sub path        { $_[0]{path} }
sub name        { $_[0]{name} }
sub drive       { $_[0]{drive} }
sub directories { $_[0]{directories} }

my $trailingDotsRegex = qr{ \.+ $ }x;

sub parent {
    $_[0]{name} eq '' ? '' : RJK::File::Paths::get($_[0]{drive} . ':' . $_[0]{directories});
}

sub volume {
    $_[0]{drive} . ':';
}

my $splitFilenameRegex = qr{ ^ (.+)\.(.+) $ }x;

sub basename {
    ($_[0]{name} =~ /$splitFilenameRegex/)[0] // $_[0]{name} // '';
}

sub extension {
    ($_[0]{name} =~ /$splitFilenameRegex/)[1] // '';
}

sub normalize {
    my $path = shift->{path};
    my (@normalized, $updir);
    $updir = 0;

    foreach my $name (reverse split /\\/, $path) {
        ++$updir && next if $name eq '..';
        $updir-- && next if $updir;
        next if $name eq '.';

        $name =~ s/$trailingDotsRegex//;    # remove trailing dots, java.nio.file.Path does not do this
        unshift @normalized, $name;
    }
    $path = join "\\", @normalized;

    return RJK::File::Paths::get($path);
}

1;

__END__

java.nio.file.Path

Path getFileName()                         - Returns the name of the file or directory denoted by this path as a Path object.
FileSystem getFileSystem()                 - Returns the file system that created this object.
Path getName(int index)                    - Returns a name element of this path as a Path object.
int getNameCount()                         - Returns the number of name elements in the path.
Path getParent()                           - Returns the parent path, or null if this path does not have a parent.
Path getRoot()                             - Returns the root component of this path as a Path object, or null if this path does not have a root component.

Path normalize()                           - Returns a path that is this path with redundant name elements eliminated.
Path relativize(Path other)                - Constructs a relative path between this path and a given path.
Path resolve(Path other)                   - Resolve the given path against this path.
Path resolve(String other)                 - Converts a given path string to a Path and resolves it against this Path in exactly the manner specified by the resolve method.
Path resolveSibling(Path other)            - Resolves the given path against this path's parent path.
Path resolveSibling(String other)          - Converts a given path string to a Path and resolves it against this path's parent path in exactly the manner specified by the resolveSibling method.

int compareTo(Path other)                  - Compares two abstract paths lexicographically.
boolean endsWith(Path other)               - Tests if this path ends with the given path.
boolean endsWith(String other)             - Tests if this path ends with a Path, constructed by converting the given path string, in exactly the manner specified by the endsWith(Path) method.
boolean equals(Object other)               - Tests this path for equality with the given object.
int hashCode()                             - Computes a hash code for this path.
boolean isAbsolute()                       - Tells whether or not this path is absolute.
Iterator<Path> iterator()                  - Returns an iterator over the name elements of this path.

boolean startsWith(Path other)             - Tests if this path starts with the given path.
boolean startsWith(String other)           - Tests if this path starts with a Path, constructed by converting the given path string, in exactly the manner specified by the startsWith(Path) method.
Path subpath(int beginIndex, int endIndex) - Returns a relative Path that is a subsequence of the name elements of this path.
Path toAbsolutePath()                      - Returns a Path object representing the absolute path of this path.
File toFile()                              - Returns a File object representing this path.
Path toRealPath(LinkOption... options)     - Returns the real path of an existing file.
String toString()                          - Returns the string representation of this path.
URI toUri()                                - Returns a URI to represent this path.
