package RJK::Path;

# Path object is immutable, only fields + accessors.
# Accessors are available when RJK::Path is imported.
# Providers of Path objects return blessed RJK::Path hashes
# containing required fields, they don't import RJK::Path.

use strict;
use warnings;

use overload '""' => 'path',
    cmp => sub { $_[0]{path} cmp $_[1]{path} }; # lt, gt, le, ge, eq, ne are autogenerated

loadModule('Properties');

sub path        { $_[0]{path} }
sub name        { $_[0]{name} }
sub volume      { $_[0]{volume} }
sub directories { $_[0]{directories} }
sub separator   { our $separator }

sub names {
    loadModule('Base');
    &names;
}

sub subpath {
    loadModule('Base');
    &subpath;
}

sub parent {
    loadModule('Base');
    &parent;
}

sub root {
    loadModule('Base');
    &root;
}

sub driveletter {
    loadModule('Base');
    &driveletter;
}

sub basename {
    loadModule('Filename');
    &basename;
}

sub extension {
    loadModule('Filename');
    &extension;
}

sub normalize {
    loadModule('Normalize');
    &normalize;
}

sub toRealPath {
    loadModule('ToRealPath');
    &toRealPath;
}

sub loadModule {
    eval "require " . __PACKAGE__ . "::$_[0]";
    eval "require " . __PACKAGE__ . "::$^O::$_[0]";
}

1;

__END__

java.nio.file.Path

  FileSystem getFileSystem()                 - Returns the file system that created this object.
x Path getFileName()                         - Returns the name of the file or directory denoted by this path as a Path object.
1 Path getName(int index)                    - Returns a name element of this path as a Path object.
1 int getNameCount()                         - Returns the number of name elements in the path, 0 = root.
x Path getParent()                           - Returns the parent path, or null if this path does not have a parent.
x Path getRoot()                             - Returns the root component of this path as a Path object, or null if this path does not have a root component.
1 = names()

x Path normalize()                           - Returns a path that is this path with redundant name elements eliminated.
  Path relativize(Path other)                - Constructs a relative path between this path and a given path.
  Path resolve(Path other)                   - Resolve the given path against this path.
  Path resolve(String other)                 - Converts a given path string to a Path and resolves it against this Path in exactly the manner specified by the resolve method.
  Path resolveSibling(Path other)            - Resolves the given path against this path's parent path.
  Path resolveSibling(String other)          - Converts a given path string to a Path and resolves it against this path's parent path in exactly the manner specified by the resolveSibling method.

  int compareTo(Path other)                  - Compares two abstract paths lexicographically.
  boolean endsWith(Path other)               - Tests if this path ends with the given path.
  boolean endsWith(String other)             - Tests if this path ends with a Path, constructed by converting the given path string, in exactly the manner specified by the endsWith(Path) method.
  boolean equals(Object other)               - Tests this path for equality with the given object.
  int hashCode()                             - Computes a hash code for this path.
  boolean isAbsolute()                       - Tells whether or not this path is absolute.
  Iterator<Path> iterator()                  - Returns an iterator over the name elements of this path.

  boolean startsWith(Path other)             - Tests if this path starts with the given path.
  boolean startsWith(String other)           - Tests if this path starts with a Path, constructed by converting the given path string, in exactly the manner specified by the startsWith(Path) method.
x Path subpath(int beginIndex, int endIndex) - Returns a relative Path that is a subsequence of the name elements of this path.
  Path toAbsolutePath()                      - Returns a Path object representing the absolute path of this path.
  File toFile()                              - Returns a File object representing this path.
x Path toRealPath(LinkOption... options)     - Returns the real path of an existing file.
x String toString()                          - Returns the string representation of this path.
  URI toUri()                                - Returns a URI to represent this path.
